using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using AutoDI.AssemblyGenerator;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mono.Cecil;
using Mono.Cecil.Cil;
using MethodAttributes = Mono.Cecil.MethodAttributes;
using ParameterAttributes = Mono.Cecil.ParameterAttributes;
using TypeAttributes = Mono.Cecil.TypeAttributes;

namespace AutoDI.Fody.Tests
{
    extern alias AutoDIFody;

    [TestClass]
    public class CSharpCodeGeneratorTests
    {
        private static Assembly _testAssembly;
        private string _outputDirectory;

        [ClassInitialize]
        public static async Task Initialize(TestContext context)
        {
            var gen = new Generator();

            _testAssembly = (await gen.Execute()).SingleAssembly();

            DI.Init(_testAssembly);
        }

        [ClassCleanup]
        public static void Cleanup()
        {
            DI.Dispose(_testAssembly);
        }

        [TestInitialize]
        public void TestSetup()
        {
            _outputDirectory = Path.Combine(".", Path.GetRandomFileName());
        }

        [TestCleanup]
        public void TestCleanup()
        {
            Directory.Delete(_outputDirectory, true);
        }

        [TestMethod]
        public void CanGenerateClassWithConstructor()
        {
            TypeDefinition type = new TypeDefinition("name.space", "testtype", TypeAttributes.Public | TypeAttributes.Class);
            MethodDefinition ctor =
                new MethodDefinition(".ctor", MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName, type)
                {
                    DeclaringType = type
                };
            ctor.Parameters.Add(new ParameterDefinition("foo", ParameterAttributes.In, new TypeDefinition("name.space.services", "IService", TypeAttributes.Interface | TypeAttributes.Public)));

            var generator = new AutoDIFody::AutoDI.Fody.CodeGen.CSharpCodeGenerator(_outputDirectory);
            var ctorGenerator = generator.Method(ctor);

            ctorGenerator.Append("if (foo == null)", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append(Environment.NewLine + "{" + Environment.NewLine);
            ctorGenerator.Append("    foo = GlobalDI.GetService<IService>();", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append(Environment.NewLine);
            ctorGenerator.Append("}", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append(Environment.NewLine);

            generator.Save();
            
            string result = File.ReadAllText(Directory.EnumerateFiles(_outputDirectory).Single());

            string expected = 
                "namespace name.space" + Environment.NewLine + 
                "{" + Environment.NewLine + 
                "    public class testtype" + Environment.NewLine +
                "    {" + Environment.NewLine +
                "        //Generated by AutoDI" + Environment.NewLine +
                "        public testtype(name.space.services.IService foo)" + Environment.NewLine +
                "        {" + Environment.NewLine + 
                "            if (foo == null)" + Environment.NewLine + 
                "            {" + Environment.NewLine + 
                "                foo = GlobalDI.GetService<IService>();" + Environment.NewLine + 
                "            }" + Environment.NewLine + 
                "            //We now return you to your regularly scheduled method" + Environment.NewLine + 
                "        }" + Environment.NewLine + 
                "    }" + Environment.NewLine + 
                "}" + Environment.NewLine;
            Assert.AreEqual(expected, result);
            Assert.AreEqual(3, ctor.DebugInformation.SequencePoints.Count);

            SequencePoint first = ctor.DebugInformation.SequencePoints[0];
            Assert.AreEqual(8, first.StartLine);
            Assert.AreEqual(8, first.EndLine);
            Assert.AreEqual(13, first.StartColumn);
            Assert.AreEqual(29, first.EndColumn);
            SequencePoint second = ctor.DebugInformation.SequencePoints[1];
            Assert.AreEqual(10, second.StartLine);
            Assert.AreEqual(10, second.EndLine);
            Assert.AreEqual(17, second.StartColumn);
            Assert.AreEqual(55, second.EndColumn);
            SequencePoint third = ctor.DebugInformation.SequencePoints[2];
            Assert.AreEqual(11, third.StartLine);
            Assert.AreEqual(11, third.EndLine);
            Assert.AreEqual(13, third.StartColumn);
            Assert.AreEqual(14, third.EndColumn);
        }
    }

    //<assembly>
    //<ref: AutoDI />
    //<weaver: AutoDI />
    namespace CSharpCodeGenrationTestsNamespace
    {
        using AutoDI;

        public interface IService1
        { }

        public class PublicClass
        {

        }
    }
    //</assembly>
}