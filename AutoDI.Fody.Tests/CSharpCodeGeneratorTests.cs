using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace AutoDI.Fody.Tests
{
    extern alias AutoDIFody;

    [TestClass]
    public class CSharpCodeGeneratorTests
    {
        private string _outputDirectory;

        [TestInitialize]
        public void TestSetup()
        {
            _outputDirectory = Path.Combine(".", Path.GetRandomFileName());
        }

        [TestCleanup]
        public void TestCleanup()
        {
            Directory.Delete(_outputDirectory, true);
        }

        [TestMethod]
        public void CanGenerateClassWithConstructor()
        {
            TypeDefinition type = new TypeDefinition("name.space", "testtype", TypeAttributes.Public | TypeAttributes.Class);
            MethodDefinition ctor =
                new MethodDefinition(".ctor", MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName, type)
                {
                    DeclaringType = type
                };

            var generator = new AutoDIFody::AutoDI.Fody.CodeGen.CSharpCodeGenerator(_outputDirectory);
            var ctorGenerator = generator.Method(ctor);

            ctorGenerator.Append("if (foo == null)", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append(Environment.NewLine + "{" + Environment.NewLine);
            ctorGenerator.Append("    foo = GlobalDI.GetService<IService>();", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append("}", Instruction.Create(OpCodes.Nop));
            ctorGenerator.Append(Environment.NewLine);

            generator.Save();
            
            string result = File.ReadAllText(Directory.EnumerateFiles(_outputDirectory).Single());

            string expected = 
                "namespace name.space" + Environment.NewLine + 
                "{" + Environment.NewLine + 
                "    public class testtype" + Environment.NewLine +
                "    {" + Environment.NewLine +
                "        //Generated by AutoDI" + Environment.NewLine +
                "        public testtype()" + Environment.NewLine +
                "        {" + Environment.NewLine + 
                "            if (foo == null)" + Environment.NewLine + 
                "            {" + Environment.NewLine + 
                "                foo = GlobalDI.GetService<IService>();" + Environment.NewLine + 
                "            }" + Environment.NewLine + 
                "            //We now return you to your regularly scheduled method" + Environment.NewLine + 
                "        }" + Environment.NewLine + 
                "    }" + Environment.NewLine + 
                "}" + Environment.NewLine;
            Assert.AreEqual(expected, result);
            Assert.AreEqual(3, ctor.DebugInformation.SequencePoints.Count);

            var first = ctor.DebugInformation.SequencePoints[0];
            Assert.AreEqual(7, first.StartLine);
            Assert.AreEqual(8, first.EndLine);
            Assert.AreEqual(13, first.StartColumn);
            Assert.AreEqual(14, first.EndColumn);
        }
    }
}